#!/bin/bash
exe_name=$0
exe_dir=`dirname "$0"`

if [ $# -lt "6" ]; then
    echo "Usage:
    ./create_heatmap.sh  INTENSITYIMAGE  DSFACTOR  OUTPUTDIR  TEMPLATENIFTI  NUMCPU CELLPIXIDLIST
    
 INTENSITYIMG     N4 corrected CFOS image. It is used to find the centroid of
                  a cell, or the brightest point, as used by ClearMap code.    
 DSFACTOR         Downsampling factor, e.g. 6x6x5 (separated by x). It is the
                  same factor that was used to downsample the cFOS image for registration.
 OUTPUTDIR        Output directory where heat map images (nifti) in the downsampled 
                  space will be written. They need to be transformed to the atlas
                  space later.
 TEMPLATENIFTI    Template nifti image in downsampled image space used only for
                  headers. It is usually the downsampled cFOS image 
                  (e.g. downsampled_7x7x5_brain.nii.gz)
                  ** THIS IS NOT THE ATLAS **.
 NUMCPU           Number of parallel processes
 CELLPXLIST       Multiple ABCD_cellpixelIDlist.mat files generated by the
                  Generate_Stats script. The mat files contain cellpixelIDlist
                  structure containing 1122 labels. Each label contains a Nx5
                  matrix, where N=total number of cell pixels. The columns
                  contains uid_of_a_cell, volume_of_a_cell,I,J,K. The integer
                  part of the UID contains the label

    "
    exit 1
fi
  

MCRROOT=/usr/local/matlab-compiler/v912
export MCR_INHIBIT_CTF_LOCK=1
export MCR_CACHE_ROOT=/tmp/mcr_${USER}_${RANDOM}
mkdir -p ${MCR_CACHE_ROOT}
LD_LIBRARY_PATH=.:${MCRROOT}/runtime/glnxa64 ;
LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${MCRROOT}/bin/glnxa64 ;
LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${MCRROOT}/sys/os/glnxa64;
LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${MCRROOT}/sys/opengl/lib/glnxa64;
export LD_LIBRARY_PATH;

args=
while [ $# -gt 0 ]; do
    token=$1
    args="${args} ${token}" 
    shift
done
echo ${exe_dir}/create_heatmap $args
${exe_dir}/create_heatmap $args
rm -rf ${MCR_CACHE_ROOT}

